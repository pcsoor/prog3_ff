<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NBA.WPFApp</name>
    </assembly>
    <members>
        <member name="T:NBA.WPFApp.App">
            <summary>
            Interaction logic for App.xaml.
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:NBA.WPFApp.App.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.App"/> class.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:NBA.WPFApp.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:NBA.WPFApp.BL.IEditorService">
            <summary>
            Editor service interface.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.BL.IEditorService.EditPlayer(NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Returns edit player result.
            </summary>
            <param name="p">Player entity ref.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:NBA.WPFApp.BL.IEditorService.EditTeam(NBA.WPFApp.Data.TeamUI)">
            <summary>
            Edit team.
            </summary>
            <param name="t">team reference.</param>
            <returns>true or false.</returns>
        </member>
        <member name="T:NBA.WPFApp.BL.IPlayerUiLogic">
            <summary>
            Interface of Player business logic.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.BL.IPlayerUiLogic.AddPlayer(System.Collections.Generic.IList{NBA.WPFApp.Data.PlayerUI})">
            <summary>
            Adds new player to the list.
            </summary>
            <param name="list">list of players in ui.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.IPlayerUiLogic.ModPlayer(NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Modify one player's props.
            </summary>
            <param name="playerToModify">player in ui to modify.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.IPlayerUiLogic.DelPlayer(System.Collections.Generic.IList{NBA.WPFApp.Data.PlayerUI},NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Deletes one player from the list and from the db as well.
            </summary>
            <param name="list">list of players in ui.</param>
            <param name="player">player in ui to delete.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.IPlayerUiLogic.GetAllPlayers">
            <summary>
            Retruns a list of players in ui.
            </summary>
            <returns>IList collection.</returns>
        </member>
        <member name="T:NBA.WPFApp.BL.ITeamUiLogic">
            <summary>
            Team logic interface.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.BL.ITeamUiLogic.AddTeam(System.Collections.Generic.IList{NBA.WPFApp.Data.TeamUI})">
            <summary>
            Adds new team to the list.
            </summary>
            <param name="list">list of teams in ui.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.ITeamUiLogic.ModTeam(NBA.WPFApp.Data.TeamUI)">
            <summary>
            Modify a team's props.
            </summary>
            <param name="teamToModify">team in ui to modify.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.ITeamUiLogic.DelTeam(System.Collections.Generic.IList{NBA.WPFApp.Data.TeamUI},NBA.WPFApp.Data.TeamUI)">
            <summary>
            Deletes one team from the list and from the db as well.
            </summary>
            <param name="list">list of players in ui.</param>
            <param name="team">team in ui to delete.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.ITeamUiLogic.GetAllTeam">
            <summary>
            Retruns a list of teams in ui.
            </summary>
            <returns>IList collection.</returns>
        </member>
        <member name="T:NBA.WPFApp.BL.PlayerUiLogic">
            <summary>
            Player Business logic.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.BL.PlayerUiLogic.#ctor(NBA.WPFApp.BL.IEditorService,GalaSoft.MvvmLight.Messaging.IMessenger,NBA.Logic.IPlayerLogic,NBA.WPFApp.Data.PlayerUI,NBA.WPFApp.Factory,NBA.WPFApp.Data.TeamUI)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.BL.PlayerUiLogic"/> class.
            </summary>
            <param name="editorService">Editor service ref.</param>
            <param name="messengerService">Messenger service ref.</param>
            <param name="playerLogic">old player logic ref.</param>
            <param name="playeruidata">playerui data ref.</param>
            <param name="factory">factory ref.</param>
            <param name="teamui">teamui data ref.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.PlayerUiLogic.#ctor(NBA.Logic.IPlayerLogic)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.BL.PlayerUiLogic"/> class.
            </summary>
            <param name="playerLogic">playerLogic interface reference.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.PlayerUiLogic.AddPlayer(System.Collections.Generic.IList{NBA.WPFApp.Data.PlayerUI})">
            <summary>
            Adds one player to list.
            </summary>
            <param name="list">list of players in ui.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.PlayerUiLogic.DelPlayer(System.Collections.Generic.IList{NBA.WPFApp.Data.PlayerUI},NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Deletes one player from list and from db as well.
            </summary>
            <param name="list">list of players in ui.</param>
            <param name="player">playerui entity.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.PlayerUiLogic.GetAllPlayers">
            <summary>
            Returns a list of players in ui.
            </summary>
            <returns>IList collection.</returns>
        </member>
        <member name="M:NBA.WPFApp.BL.PlayerUiLogic.ModPlayer(NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Change given player's properties.
            </summary>
            <param name="playerToModify">player to modify.</param>
        </member>
        <member name="T:NBA.WPFApp.BL.TeamUiLogic">
            <summary>
            Business Logic of team.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.BL.TeamUiLogic.#ctor(NBA.WPFApp.BL.IEditorService,GalaSoft.MvvmLight.Messaging.IMessenger,NBA.Logic.ITeamLogic,NBA.WPFApp.Factory,NBA.WPFApp.Data.TeamUI)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.BL.TeamUiLogic"/> class.
            </summary>
            <param name="editorService">editor service ref.</param>
            <param name="messengerService">messenger service ref.</param>
            <param name="teamLogic">team logic ref.</param>
            <param name="factory">ref to factory.</param>
            <param name="teamuidata">ref to team data.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.TeamUiLogic.#ctor(NBA.Logic.ITeamLogic)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.BL.TeamUiLogic"/> class.
            </summary>
            <param name="teamLogic">Ref to team logic.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.TeamUiLogic.AddTeam(System.Collections.Generic.IList{NBA.WPFApp.Data.TeamUI})">
            <summary>
            Adds a team to list.
            </summary>
            <param name="list">list of teams.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.TeamUiLogic.DelTeam(System.Collections.Generic.IList{NBA.WPFApp.Data.TeamUI},NBA.WPFApp.Data.TeamUI)">
            <summary>
            Deletes one team from list.
            </summary>
            <param name="list">list of teams.</param>
            <param name="team">team ref.</param>
        </member>
        <member name="M:NBA.WPFApp.BL.TeamUiLogic.GetAllTeam">
            <summary>
            Returns a list of all team.
            </summary>
            <returns>list.</returns>
        </member>
        <member name="M:NBA.WPFApp.BL.TeamUiLogic.ModTeam(NBA.WPFApp.Data.TeamUI)">
            <summary>
            Modifies one team.
            </summary>
            <param name="teamToModify">team to mod.</param>
        </member>
        <member name="T:NBA.WPFApp.Data.PositionTypeUI">
            <summary>
            Position types.
            </summary>
        </member>
        <member name="F:NBA.WPFApp.Data.PositionTypeUI.PointGuard">
            <summary>
            Pointgurad position.
            </summary>
        </member>
        <member name="F:NBA.WPFApp.Data.PositionTypeUI.ShootingGuard">
            <summary>
            Shooting guard position.
            </summary>
        </member>
        <member name="F:NBA.WPFApp.Data.PositionTypeUI.SmallForward">
            <summary>
            Small forward position.
            </summary>
        </member>
        <member name="F:NBA.WPFApp.Data.PositionTypeUI.PowerForward">
            <summary>
            Power Forward position.
            </summary>
        </member>
        <member name="F:NBA.WPFApp.Data.PositionTypeUI.Center">
            <summary>
            Center position.
            </summary>
        </member>
        <member name="T:NBA.WPFApp.Data.PlayerUI">
            <summary>
            Player entity to display in ui.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.PlayerID">
            <summary>
            Gets or sets iD of the player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.Name">
            <summary>
            Gets or sets the name of the player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.Birth">
            <summary>
            Gets or sets the date of birth of the player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.Height">
            <summary>
            Gets or sets the height of the player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.Weight">
            <summary>
            Gets or sets the weight of the player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.Post">
            <summary>
            Gets or sets the post of the player where he plays at.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.Salary">
            <summary>
            Gets or sets the salary of the player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.Number">
            <summary>
            Gets or sets the number of the player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.PlayerUI.TeamUI">
            <summary>
            Gets or sets the Team of the player where he plays at.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.Data.PlayerUI.ConvertToPlayerEntity(NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Converts PlayerUI entity to Player db entity.
            </summary>
            <param name="playerui">Player ui entity.</param>
            <returns>Player db entity.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.PlayerUI.ConvertToPlayerUiEntity(NBA.Data.Model.Player)">
            <summary>
            Converts one db player entity to player ui entity.
            </summary>
            <param name="player">player entity.</param>
            <returns>PlayerUI entity.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.PlayerUI.ConvertToPositionType(NBA.WPFApp.Data.PositionTypeUI)">
            <summary>
            Converts ui position type to db position type.
            </summary>
            <param name="pt">ui position type.</param>
            <returns>db position type.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.PlayerUI.ConvertToPositionTypeUI(NBA.Data.Model.Player.PositionType)">
            <summary>
            Converts db position type to ui position type.
            </summary>
            <param name="pt">db position type.</param>
            <returns>ui position type.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.PlayerUI.CopyFrom(NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Copies a player entity.
            </summary>
            <param name="other">player to copy.</param>
        </member>
        <member name="T:NBA.WPFApp.Data.TeamUI">
            <summary>
            Team ui entity.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.TeamUI.TeamID">
            <summary>
            Gets or sets the team's id.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.TeamUI.TeamName">
            <summary>
            Gets or sets the team's name.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.TeamUI.Coach">
            <summary>
            Gets or sets the team's coach.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Data.TeamUI.Region">
            <summary>
            Gets or sets the team's location.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.Data.TeamUI.ConvertToTeamEntity(NBA.WPFApp.Data.TeamUI)">
            <summary>
            Converts PlayerUI entity to Player db entity.
            </summary>
            <param name="teamui">Player ui entity.</param>
            <returns>Player db entity.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.TeamUI.ConvertToTeamUiEntity(NBA.Data.Model.Teams)">
            <summary>
            Converts one db player entity to player ui entity.
            </summary>
            <param name="team">player entity.</param>
            <returns>PlayerUI entity.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.TeamUI.CopyFrom(NBA.WPFApp.Data.TeamUI)">
            <summary>
            Copies a team entity.
            </summary>
            <param name="other">team to copy.</param>
        </member>
        <member name="M:NBA.WPFApp.Data.TeamUI.ToString">
            <summary>
            Overrides the tostring method. It returs the team's name.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.TeamUI.Equals(System.Object)">
            <summary>
            Overrides equals method.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:NBA.WPFApp.Data.TeamUI.GetHashCode">
            <summary>
            Overries get hash code method.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="T:NBA.WPFApp.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.Factory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.Factory"/> class.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Factory.PlayerLogic">
            <summary>
            Gets player logic.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.Factory.Ctx">
            <summary>
            Gets db context.
            </summary>
        </member>
        <member name="T:NBA.WPFApp.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml.
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:NBA.WPFApp.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.MainWindow"/> class.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:NBA.WPFApp.MyIoc">
            <summary>
            Custom IoC.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.MyIoc.Instance">
            <summary>
            Gets myIoc instance.
            </summary>
        </member>
        <member name="T:NBA.WPFApp.UI.CheckDateIfNullConverter">
            <summary>
            Checks if date is null.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.CheckDateIfNullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to.
            </summary>
            <param name="value">value.</param>
            <param name="targetType">target type.</param>
            <param name="parameter">parameter.</param>
            <param name="culture">culture info.</param>
            <returns>DateTime if not null, string if null.</returns>
        </member>
        <member name="M:NBA.WPFApp.UI.CheckDateIfNullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back.
            </summary>
            <param name="value">value.</param>
            <param name="targetType">target type.</param>
            <param name="parameter">parameter.</param>
            <param name="culture">culture info.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:NBA.WPFApp.UI.EditorServiceViaWindow">
            <summary>
            Editor service via wndow.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorServiceViaWindow.EditPlayer(NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Returns player edit's result.
            </summary>
            <param name="p">Player ui entity.</param>
            <returns>true or false, depends on result.</returns>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorServiceViaWindow.EditTeam(NBA.WPFApp.Data.TeamUI)">
            <summary>
            Returns team edit's result.
            </summary>
            <param name="t">Team ui entity.</param>
            <returns>true or false, depends on result.</returns>
        </member>
        <member name="T:NBA.WPFApp.UI.EditorWindow">
            <summary>
            Interaction logic for EditorWindow.xaml.
            </summary>
            <summary>
            EditorWindow
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.UI.EditorWindow"/> class.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorWindow.#ctor(NBA.WPFApp.Data.PlayerUI)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.UI.EditorWindow"/> class.
            </summary>
            <param name="oldPlayer">Player ui entity.</param>
        </member>
        <member name="P:NBA.WPFApp.UI.EditorWindow.PlayerUI">
            <summary>
            Gets player ui ref.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:NBA.WPFApp.UI.EditorWindowTeam">
            <summary>
            Interaction logic for EditorWindowTeam.xaml.
            </summary>
            <summary>
            EditorWindowTeam
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorWindowTeam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.UI.EditorWindowTeam"/> class.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorWindowTeam.#ctor(NBA.WPFApp.Data.TeamUI)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.UI.EditorWindowTeam"/> class.
            </summary>
            <param name="oldTeam">Player ui entity.</param>
        </member>
        <member name="P:NBA.WPFApp.UI.EditorWindowTeam.TeamUI">
            <summary>
            Gets team ui ref.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.EditorWindowTeam.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:NBA.WPFApp.UI.HeightToStringConverter">
            <summary>
            Height to string converter.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.HeightToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts standart int to height format like: Xm Ycm.
            </summary>
            <param name="value">value to convert.</param>
            <param name="targetType">target type.</param>
            <param name="parameter">parameter.</param>
            <param name="culture">culture.</param>
            <returns>some obj.</returns>
        </member>
        <member name="M:NBA.WPFApp.UI.HeightToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            converts back the string format back to int.
            </summary>
            <param name="value">value to convert.</param>
            <param name="targetType">targettype.</param>
            <param name="parameter">param.</param>
            <param name="culture">cultureinfo.</param>
            <returns>some obj.</returns>
        </member>
        <member name="T:NBA.WPFApp.UI.StatusToBrushConverter">
            <summary>
            Status to brush converter.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.UI.StatusToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NBA.WPFApp.UI.StatusToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NBA.WPFApp.VM.EditorViewModel">
            <summary>
            Editor window.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.VM.EditorViewModel.#ctor(NBA.Logic.ITeamLogic)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.VM.EditorViewModel"/> class.
            </summary>
            <param name="logic">Team logic reference.</param>
        </member>
        <member name="M:NBA.WPFApp.VM.EditorViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.VM.EditorViewModel"/> class.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.EditorViewModel.Positions">
            <summary>
            Gets list of positions.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.EditorViewModel.PlayerUi">
            <summary>
            Gets or sets player ui entity.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.EditorViewModel.SelectedTeam">
            <summary>
            Gets or sets returns selected team.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.EditorViewModel.TeamCollection">
            <summary>
            Gets collection of teams.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.EditorViewModel.TeamUi">
            <summary>
            Gets or sets team ui entity.
            </summary>
        </member>
        <member name="T:NBA.WPFApp.VM.EditorViewModelTeam">
            <summary>
            Team editor view model.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.VM.EditorViewModelTeam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.VM.EditorViewModelTeam"/> class.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.EditorViewModelTeam.TeamUi">
            <summary>
            Gets or sets team ui entity.
            </summary>
        </member>
        <member name="T:NBA.WPFApp.VM.MainViewModel">
            <summary>
            Main view model class that implements view model base.
            </summary>
        </member>
        <member name="M:NBA.WPFApp.VM.MainViewModel.#ctor(NBA.WPFApp.BL.IPlayerUiLogic,NBA.WPFApp.BL.ITeamUiLogic)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.VM.MainViewModel"/> class.
            </summary>
            <param name="logic">Player ui logic ref.</param>
            <param name="teamUiLogic">Team ui logic refer.</param>
        </member>
        <member name="M:NBA.WPFApp.VM.MainViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.WPFApp.VM.MainViewModel"/> class.
            implements main view model.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.PlayerSelected">
            <summary>
            Gets or sets the selected player.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.TeamSelected">
            <summary>
            Gets or sets selected team.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.Team">
            <summary>
            Gets team collection.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.TeamCollection">
            <summary>
            Gets collection of teams.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.AddCmd">
            <summary>
            Gets add command.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.ModCmd">
            <summary>
            Gets modification command.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.DelCmd">
            <summary>
            Gets delete command.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.AddTeamCmd">
            <summary>
            Gets add command.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.ModTeamCmd">
            <summary>
            Gets modification command.
            </summary>
        </member>
        <member name="P:NBA.WPFApp.VM.MainViewModel.DelTeamCmd">
            <summary>
            Gets delete command.
            </summary>
        </member>
    </members>
</doc>
