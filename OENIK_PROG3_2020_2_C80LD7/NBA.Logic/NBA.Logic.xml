<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NBA.Logic</name>
    </assembly>
    <members>
        <member name="T:NBA.Logic.Average">
            <summary>
            This class necessary for calculating average values given by logic.
            </summary>
        </member>
        <member name="P:NBA.Logic.Average.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NBA.Logic.Average.Avg">
            <summary>
            Gets or sets the average result.
            </summary>
        </member>
        <member name="M:NBA.Logic.Average.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NBA.Logic.Average.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NBA.Logic.Average.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NBA.Logic.IPlayerLogic">
            <summary>
            Describes player specific methods.
            </summary>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetOnePlayerById(System.Int32)">
            <summary>
            Return one player entity.
            </summary>
            <param name="id">player's id.</param>
            <returns>player entity.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetOnePlayerStatById(System.Int32)">
            <summary>
            Return one player stat entity.
            </summary>
            <param name="id">playerstat's id.</param>
            <returns>player stat entity.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetAllPlayers">
            <summary>
            Gives all of the players.
            </summary>
            <returns>list.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetAllPlayerStat">
            <summary>
            Returns all player statistics.
            </summary>
            <returns>returns list of player statistics.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.AddNewPlayer(NBA.Data.Model.Player)">
            <summary>
            Inserts new player into database.
            </summary>
            <param name="player">player entity.</param>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.AddNewPlayerStat(NBA.Data.Model.PlayerStats)">
            <summary>
            Inserts new player statistic into the database.
            </summary>
            <param name="playerStatistic">player statistic entity.</param>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetPlayerQtyByTeams">
            <summary>
            Returns how many player plays in each team.
            </summary>
            <returns>list.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetPlayerWithTheMostGamesPlayed">
            <summary>
            Return one player, who played the most game in the current series.
            </summary>
            <returns>player.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetPlayerAveragePointPerGame">
            <summary>
            How many points a player earned in the series.
            </summary>
            <returns>average number.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.DeletePlayer(System.Int32)">
            <summary>
            Delete player with the given id.
            </summary>
            <param name="id">player's id.</param>
            <returns>return true or false, depends on that it can be deleted or not.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.ChangePlayer(NBA.Data.Model.Player)">
            <summary>
            Change player.
            </summary>
            <param name="player">player.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.DeletePlayerStatistic(System.Int32)">
            <summary>
            Delete player's statistic with the given id.
            </summary>
            <param name="id">playerstat's id.</param>
            <returns>return true or false, depends on that it can be deleted or not.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.FindTeamByName(System.String)">
            <summary>
            Finds a team by its name.
            </summary>
            <param name="teamName">team's name.</param>
            <returns>found team.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.ChangePlayerSalary(System.Int32,System.Int32)">
            <summary>
            Changes player's salary.
            </summary>
            <param name="id">player's id.</param>
            <param name="newsalary">player's new salary.</param>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.UpdatePlayer(System.Int32)">
            <summary>
            Updates player entity.
            </summary>
            <param name="id">Player entity.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetPlayerByTeam(System.Int32)">
            <summary>
            Return player player from one team.
            </summary>
            <param name="team">team's id.</param>
            <returns>List of players.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetPlayerAveragePointPerGameAsync">
            <summary>
            Gets player's average points per game from the past season.
            </summary>
            <returns>List of Averages.</returns>
        </member>
        <member name="M:NBA.Logic.IPlayerLogic.GetPlayerWithTheMostGamesPlayedAsync">
            <summary>
            Gets player who played the most.
            </summary>
            <returns>List of Averages.</returns>
        </member>
        <member name="T:NBA.Logic.ITeamLogic">
            <summary>
            Implements Team specific methods.
            </summary>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.AddNewTeam(NBA.Data.Model.Teams)">
            <summary>
            Inserts new team into the database.
            </summary>
            <param name="team">team entity that needs to be inserted.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.AddNewTeamStat(NBA.Data.Model.TeamStats)">
            <summary>
            Inserts new team statistic into the database.
            </summary>
            <param name="teamStatistic">team statistic entity that needs to be inserted.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.AddNewSeries(NBA.Data.Model.Series)">
            <summary>
            Inserts new series into the database.
            </summary>
            <param name="series">series entity that needs to be inserted.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetAllTeams">
            <summary>
            Returns list of teams.
            </summary>
            <returns>Collection.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetAllTeamStat">
            <summary>
            Returns all of the team statistics.
            </summary>
            <returns>collection.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetAllSeriesResult">
            <summary>
            Returns all series result.
            </summary>
            <returns>collection.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetOneTeamById(System.Int32)">
            <summary>
            Get one team.
            </summary>
            <param name="id">team's id.</param>
            <returns>team entity.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetOneTeamStatById(System.Int32)">
            <summary>
            Get one team statistic.
            </summary>
            <param name="id">team statistic's id.</param>
            <returns>teamstat entity.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetOneSeriesId(System.Int32)">
            <summary>
            Get one series.
            </summary>
            <param name="id">series's id.</param>
            <returns>series entity.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetWinQtyByTeams">
            <summary>
            Gets the quantyt of the wins by teams.
            </summary>
            <returns>IQueryable list.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.DeleteTeam(System.Int32)">
            <summary>
            Deletes a team.
            </summary>
            <param name="id">team's id.</param>
            <returns>return true or false, depends on that it can be deleted or not.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.DeleteTeamStat(System.Int32)">
            <summary>
            Deletes a team statistic.
            </summary>
            <param name="id">team stat's id.</param>
            <returns>return true or false, depends on that it can be deleted or not.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.DeleteSeries(System.Int32)">
            <summary>
            Deletes a series.
            </summary>
            <param name="id">series's id.</param>
            <returns>return true or false, depends on that it can be deleted or not.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.ChangeTeamName(System.Int32,System.String)">
            <summary>
            Updates team's name.
            </summary>
            <param name="id">team's id.</param>
            <param name="newname">team's new name.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.ChangeFinalResult(System.Int32,System.String)">
            <summary>
            Update the final result of the series.
            </summary>
            <param name="year">Year of the sereies.</param>
            <param name="newresult">new final result.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.ChangeWinnerId(System.Int32,System.Int32)">
            <summary>
            Update winner team.
            </summary>
            <param name="year">year of the series.</param>
            <param name="newid">new winner team's id.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.ChangeLoserId(System.Int32,System.Int32)">
            <summary>
            Update loser team.
            </summary>
            <param name="year">year of the series.</param>
            <param name="newid">new loser team's id.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.ChangeTeamStatPPG(System.Int32,System.Double)">
            <summary>
            Updates one team point per game statistic.
            </summary>
            <param name="id">stat id.</param>
            <param name="newppg">new ppg value.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.ChangeTeamStatAST(System.Int32,System.Double)">
            <summary>
            Updates one team assist per game statistic.
            </summary>
            <param name="id">stat id.</param>
            <param name="newassist">new assist value.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.UpdateTeam(System.Int32)">
            <summary>
            Updates team entity.
            </summary>
            <param name="id">Team entity's id.</param>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetTeamAverageStealPerGame">
            <summary>
            Gets average steals per games by teams from previous seasons.
            </summary>
            <returns>List.</returns>
        </member>
        <member name="M:NBA.Logic.ITeamLogic.GetTeamAverageStealPerGameAsync">
            <summary>
            Gets average steals per game in one team with async task.
            </summary>
            <returns>task.</returns>
        </member>
        <member name="T:NBA.Logic.PlayerLogic">
            <summary>
            Implements player specific methods.
            </summary>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.#ctor(NBA.Repository.IPlayerRepository,NBA.Repository.IPlayerStatsRepository,NBA.Repository.ITeamsRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.Logic.PlayerLogic"/> class.
            </summary>
            <param name="playerRepo">player entity.</param>
            <param name="playerStatsRepo">team entity.</param>
            <param name="teamRepo">play statistics.</param>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetAllPlayers">
            <inheritdoc/>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.AddNewPlayer(NBA.Data.Model.Player)">
            <inheritdoc/>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.ChangePlayer(NBA.Data.Model.Player)">
            <summary>
            Changes given players properties.
            </summary>
            <param name="player">player to change.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetOnePlayerById(System.Int32)">
            <summary>
            Gives you one player.
            </summary>
            <param name="id">id of the player.</param>
            <returns>Player entity.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetPlayerQtyByTeams">
            <summary>
            Return how many players are there in the team.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetPlayerWithTheMostGamesPlayed">
            <summary>
            Return one player in string format, who played the most.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetPlayerWithTheMostGamesPlayedAsync">
            <summary>
            Gets player who played the most.
            </summary>
            <returns>List of Averages.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.DeletePlayer(System.Int32)">
            <summary>
            Delete player entity.
            </summary>
            <param name="id">player's id.</param>
            <returns>true or false, depends on that the id could be found in the database.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetPlayerAveragePointPerGame">
            <summary>
            Get one players average point per game by series.
            </summary>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetPlayerAveragePointPerGameAsync">
            <summary>
            Gets player's average points per game from the past season.
            </summary>
            <returns>List of Averages.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.ChangePlayerSalary(System.Int32,System.Int32)">
            <summary>
            Change player's salary.
            </summary>
            <param name="id">player's id.</param>
            <param name="newsalary">player's new salary to update.</param>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.UpdatePlayer(System.Int32)">
            <summary>
            Updates player entity.
            </summary>
            <param name="id">Player type entity.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetPlayerByTeam(System.Int32)">
            <summary>
            Return players in one team.
            </summary>
            <param name="team">team's id.</param>
            <returns>List of players.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.DeletePlayerStatistic(System.Int32)">
            <summary>
            Delete player statistic if the id exists.
            </summary>
            <param name="id">player stat id.</param>
            <returns>true or false, depends on that the id could be found in the database.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetOnePlayerStatById(System.Int32)">
            <summary>
            eturns one player stat if the id exists.
            </summary>
            <param name="id">player stat id.</param>
            <returns>Player stat.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.GetAllPlayerStat">
            <summary>
            Returns a list of player statistics.
            </summary>
            <returns>Returns a list.</returns>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.AddNewPlayerStat(NBA.Data.Model.PlayerStats)">
            <summary>
            Adds new player statistic into the database.
            </summary>
            <param name="playerStatistic">player statistic entity that needs to be inserted.</param>
        </member>
        <member name="M:NBA.Logic.PlayerLogic.FindTeamByName(System.String)">
            <summary>
            Finds a team by its name.
            </summary>
            <param name="teamName">team's name.</param>
            <returns>found team.</returns>
        </member>
        <member name="T:NBA.Logic.TeamLogic">
            <summary>
            This class implements team specific methods.
            </summary>
        </member>
        <member name="M:NBA.Logic.TeamLogic.#ctor(NBA.Repository.ITeamsRepository,NBA.Repository.ITeamsStatsRepository,NBA.Repository.ISeriesRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:NBA.Logic.TeamLogic"/> class.
            </summary>
            <param name="teamRepo">This is teamrepository.</param>
            <param name="teamStatsRepo">this is team stat repository.</param>
            <param name="seriesRepo">this is series repository.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetAllTeams">
            <inheritdoc/>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetOneTeamById(System.Int32)">
            <summary>
            Returns one team.
            </summary>
            <param name="id">id of the team.</param>
            <returns>reeturn one team.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetAllTeamStat">
            <summary>
            Returns all of the team statistics.
            </summary>
            <returns>collection.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetWinQtyByTeams">
            <summary>
            Number of wins by teams.
            </summary>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.DeleteTeam(System.Int32)">
            <summary>
            Delete one team by the given id.
            </summary>
            <param name="id">team's id.</param>
            <returns>true or false, depends on that the id could be found in the database.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.ChangeTeamName(System.Int32,System.String)">
            <summary>
            Changes team's name.
            </summary>
            <param name="id">team's id.</param>
            <param name="newname">team's new name.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.ChangeFinalResult(System.Int32,System.String)">
            <summary>
            Update the final result of the series.
            </summary>
            <param name="year">Year of the sereies.</param>
            <param name="newresult">new final result.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.ChangeWinnerId(System.Int32,System.Int32)">
            <summary>
            Updates winner team.
            </summary>
            <param name="year">year of the series.</param>
            <param name="newid">new winner team's id.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.ChangeLoserId(System.Int32,System.Int32)">
            <summary>
            Update loser team.
            </summary>
            <param name="year">year of the series.</param>
            <param name="newid">new loser team's id.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.ChangeTeamStatPPG(System.Int32,System.Double)">
            <summary>
            Updates one team point per game statistic.
            </summary>
            <param name="id">stat id.</param>
            <param name="newppg">new ppg value.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.ChangeTeamStatAST(System.Int32,System.Double)">
            <summary>
            Updates one team assist per game statistic.
            </summary>
            <param name="id">stat id.</param>
            <param name="newassist">new assist value.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetAllSeriesResult">
            <summary>
            Returns all series result.
            </summary>
            <returns>collection.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetTeamAverageStealPerGame">
            <summary>
            Get average steals by teams.
            </summary>
            <returns>IQueryable list.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetTeamAverageStealPerGameAsync">
            <summary>
            Gets average steals per game in one team with async task.
            </summary>
            <returns>task.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetOneTeamStatById(System.Int32)">
            <summary>
            Returns one team statisic by id.
            </summary>
            <param name="id">team statistic's id.</param>
            <returns>one team statistic entity.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.GetOneSeriesId(System.Int32)">
            <summary>
            Get one series by id.
            </summary>
            <param name="id">series's id.</param>
            <returns>one series entity.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.DeleteTeamStat(System.Int32)">
            <summary>
            Deletes one team statistic if the if exists.
            </summary>
            <param name="id">team statistic's entity that needs to be deleted.</param>
            <returns>true or false, depends on that the id could be fuond in the database.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.DeleteSeries(System.Int32)">
            <summary>
            Deletes one series if the if exists.
            </summary>
            <param name="id">series's entity that needs to be deleted.</param>
            <returns>true or false, depends on that the id could be fuond in the database.</returns>
        </member>
        <member name="M:NBA.Logic.TeamLogic.AddNewTeam(NBA.Data.Model.Teams)">
            <summary>
            Inserts new team into the database.
            </summary>
            <param name="team">team entity that needs to be inserted.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.AddNewTeamStat(NBA.Data.Model.TeamStats)">
            <summary>
            Inserts new team statistic into the database.
            </summary>
            <param name="teamStatistic">team statistic entity that needs to be inserted.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.AddNewSeries(NBA.Data.Model.Series)">
            <summary>
            Inserts new series into the database.
            </summary>
            <param name="series">series entity that needs to be inserted.</param>
        </member>
        <member name="M:NBA.Logic.TeamLogic.UpdateTeam(System.Int32)">
            <summary>
            Updates a team.
            </summary>
            <param name="id">team's id.</param>
        </member>
    </members>
</doc>
